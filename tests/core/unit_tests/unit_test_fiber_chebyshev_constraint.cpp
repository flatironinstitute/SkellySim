
/// \file unit_test_fiber_base.cpp
/// \brief Unit tests for FiberChebyshevConstraint class

// C++ includes
#include <iostream>
#include <memory>
#include <string>
#include <vector>

// skelly includes
#include <fiber_chebyshev_constraint.hpp>
#include <msgpack.hpp>

// test files
#include "./mpi_environment.hpp"

// Test if the Chebyshev convenience functions work correctly
TEST(FiberChebyshevConstraint, constructor) {
    int N = 16;
    FiberChebyshevConstraint FS(N, N - 3, N - 4, N - 4);

    Eigen::MatrixXd FS_IM_true{{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
                               {1.0000000000000000, 0.0000000000000000, -0.5000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, -0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.2500000000000000, 0.0000000000000000, -0.2500000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, -0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.1666666666666667, 0.0000000000000000,
                                -0.1666666666666667, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                -0.0000000000000000, -0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.1250000000000000,
                                0.0000000000000000, -0.1250000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, -0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.1000000000000000, 0.0000000000000000, -0.1000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, -0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0833333333333333, 0.0000000000000000, -0.0833333333333333,
                                0.0000000000000000, 0.0000000000000000, -0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0714285714285714, 0.0000000000000000,
                                -0.0714285714285714, 0.0000000000000000, -0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0625000000000000,
                                0.0000000000000000, -0.0625000000000000, -0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0555555555555556, 0.0000000000000000, -0.0555555555555556, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0500000000000000, -0.0000000000000000, 0.0000000000000000},
                               {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
                                0.0000000000000000, 0.0000000000000000, 0.0454545454545455, 0.0000000000000000}};
    EXPECT_TRUE(FS.IM_.isApprox(FS_IM_true));
}

// Test our ability to do 'views' into the object
TEST(FiberChebyshevConstraint, views) {
    // Create a smaller fiber
    int N = 8;
    FiberChebyshevConstraint FS(N, N - 3, N - 4, N - 4);

    // Create a canned state vector
    Eigen::VectorXd initXX{
        {1, 2, 3, 4, 5, 6, 7, 8, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.01, 0.02, 0.03, 0.04, 0.05}};
    FS.XX_ = initXX;
    EXPECT_TRUE(initXX.segment(0, 8).isApprox(FS.XW()));
    EXPECT_TRUE(initXX.segment(8, 8).isApprox(FS.YW()));
    EXPECT_TRUE(initXX.segment(16, 5).isApprox(FS.TW()));

    // Try views into the split_at function
    auto [s1, s2] = FS.SplitAt(FS.XW(), 4);
    EXPECT_TRUE(s1.isApprox(initXX.segment(0, 4)));
    EXPECT_TRUE(s2.isApprox(initXX.segment(4, 4)));

    // Can we edit into the double-ref?
    s1[3] = 599;
    Eigen::VectorXd s1_new{{1, 2, 3, 599}};
    EXPECT_TRUE(s1_new.isApprox(s1));
}

// Test the ability to integrate various quantities
TEST(FiberChebyshevConstraint, integrate_up) {
    // Create a smaller fiber
    int N = 8;
    FiberChebyshevConstraint FS(N, N - 3, N - 4, N - 4);

    // Create a canned state vector
    Eigen::VectorXd initXX{
        {1, 2, 3, 4, 5, 6, 7, 8, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.01, 0.02, 0.03, 0.04, 0.05}};
    FS.XX_ = initXX;

    // Try to use IntegrateUp starting at the lowest level
    // Need to have somewhere to shove the return type
    Eigen::VectorXd XC_first = Eigen::VectorXd::Zero(4);
    Eigen::VectorXd XsC_first{{6.0, 7.0078125, 2.9921875, -0.0026041666666666665}};
    double Ax = 5.0;
    double Bx = 6.0;
    FS.IntegrateUp(XC_first, XsC_first, 0.5, Ax);

    Eigen::VectorXd XC_first_real{{5.0, 2.251953125, 0.8759765625, 0.24934895833333331}};
    EXPECT_TRUE(XC_first_real.isApprox(XC_first));

    // Try the second level
    Eigen::VectorXd XC_second = Eigen::VectorXd::Zero(4);
    Eigen::VectorXd XsC_second = Eigen::VectorXd::Zero(4);
    Eigen::VectorXd XssC_second{{14.0, 23.9375, -0.03125, 0.020833333333333332}};
    FS.IntegrateUp(XsC_second, XC_second, XssC_second, 0.5, Ax, Bx);

    EXPECT_TRUE(XC_first_real.isApprox(XC_second));
}

// Test divide and construct abilities
TEST(FiberChebyshevConstraint, divide_and_construct) {
    int N = 8;
    FiberChebyshevConstraint FS(N, N - 3, N - 4, N - 4);

    // Create a canned state vector
    Eigen::VectorXd initXX{
        {1, 2, 3, 4, 5, 6, 7, 8, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.01, 0.02, 0.03, 0.04, 0.05}};
    FS.XX_ = initXX;

    // Call divide and construct, even though some of the values are bogus, to see if they are constructed
    // internally correctly
    FS.DivideAndConstruct(0.5);
    EXPECT_TRUE(FS.XssssC_.isApprox(initXX.segment(0, 4)));
    EXPECT_TRUE(FS.YssssC_.isApprox(initXX.segment(8, 4)));
    EXPECT_TRUE(FS.TsC_.isApprox(initXX.segment(16, 4)));

    // Check the integrations in XC
    Eigen::VectorXd XsssC_true{{48.0, -0.125, 0.125, 0.125}};
    Eigen::VectorXd XssC_true{{14.0, 11.984375, -0.0078125, 0.005208333333333333}};
    Eigen::VectorXd XsC_true{{6.0, 3.5009765625, 0.7490234375, -0.0003255208333333333}};
    Eigen::VectorXd XC_true{{5.0, 1.4063720703125, 0.21881103515625, 0.031209309895833332}};

    EXPECT_TRUE(XsssC_true.isApprox(FS.XsssC_));
    EXPECT_TRUE(XssC_true.isApprox(FS.XssC_));
    EXPECT_TRUE(XsC_true.isApprox(FS.XsC_));
    EXPECT_TRUE(XC_true.isApprox(FS.XC_));

    // Check the integrations in T
    Eigen::VectorXd TC_true{{0.05, -0.00125, 0.00125, 0.00125}};
    EXPECT_TRUE(TC_true.isApprox(FS.TC_));
}

// Test views into the arrays of the fiber (divide and construct)
TEST(FiberChebyshevConstraint, integration) {
    // Create a fiber base object to store data
    int N = 16;
    FiberChebyshevConstraint FS(N, N - 3, N - 4, N - 4);
    double L = 0.1;

    // initialization conditions taken from julia to compare
    Eigen::VectorXd init_X{{0.9997588300226782, 0.9058773132192033, 0.6972363395327937, 0.05311960018683659,
                            0.9073058495439762, 0.5844709323969469, 0.9926879198264066, 0.8174088784626208,
                            0.6226889681098617, 0.944194248057808, 0.5264407345576302, 0.14594985883286538,
                            0.4044355011201404, 0.7273031813753761, 0.1779453022879729, 0.8886702751074465}};
    Eigen::VectorXd init_Y{{0.0717673027334802, 0.4141150124525852, 0.1293327638944125, 0.41547171378753767,
                            0.25002945685031575, 0.8789343034881281, 0.10127226406163892, 0.5856798770901475,
                            0.8913856789767505, 0.8582499568770857, 0.997423121916566, 0.8218839755299836,
                            0.04553314891254823, 0.4026486459151246, 0.8599775977324692, 0.7524155535683011}};
    Eigen::VectorXd init_T{{0.18311605785772567, 0.17679324432680055, 0.7696932851561678, 0.013768311103934616,
                            0.9854863423547627, 0.1300696339820414, 0.4064240831808379, 0.13709530013691218,
                            0.8522195831731575, 0.10551693315332411, 0.35052090551564186, 0.6938329801718334,
                            0.5987492088519557}};

    // concatenate vectors
    Eigen::VectorXd XX(init_X.size() + init_Y.size() + init_T.size());
    XX << init_X, init_Y, init_T;
    FS.XX_ = XX;

    // Run divide and construct
    FS.DivideAndConstruct(L);

    // Test the tension component
    auto IMT = FS.IMT_ * (L / 2.0);
    Eigen::MatrixXd TsM(FS.n_equations_tension_, FS.n_equations_tension_ + 1);
    TsM << Eigen::MatrixXd::Identity(FS.n_equations_tension_, FS.n_equations_tension_),
        Eigen::MatrixXd::Zero(FS.n_equations_tension_, 1);
    Eigen::VectorXd colvec(FS.n_equations_tension_);
    colvec << 1.0, Eigen::VectorXd::Zero(FS.n_equations_tension_ - 1);
    Eigen::MatrixXd TM(IMT.rows(), IMT.cols() + 1);
    TM << IMT, colvec;
    auto TsC_raw = TsM * init_T;
    auto TC_raw = TM * init_T;

    EXPECT_TRUE(TC_raw.isApprox(FS.TC_));
    EXPECT_TRUE(TsC_raw.isApprox(FS.TsC_));
}

// Test if we can form the matrix-vector product of A by brute force with unit vectors

// Fake objective function to compare to
Eigen::VectorXd lobj_generator(Eigen::VectorXd &XXold, Eigen::VectorXd &XX, FiberChebyshevConstraint &FSold,
                               FiberChebyshevConstraint &FS, const double L) {
    // Assume the fiber generators are setup correclty for the number of equations, but don't have their state
    // vectors assigned yet
    Eigen::VectorXd retval = Eigen::VectorXd::Zero(FS.n_equations_);

    // Have to run DivideAndConstruct for every new fiber position after setting the state vector
    FS.XX_ = XX;
    FS.DivideAndConstruct(L);

    // Use the fake objective function
    //
    // XXX Special note: To get a syntax like Julia's element-wise operations, you have to coerce the VectorXd
    // into an ArrayXd format.
    Eigen::VectorXd W1 = FS.YC_.array() * FSold.XssssC_.array() * FSold.TsC_.array();
    Eigen::VectorXd W2 = FSold.YC_.array() * FS.XssssC_.array() * FSold.TsC_.array();
    Eigen::VectorXd W3 = FSold.YC_.array() * FSold.XssssC_.array() * FS.TsC_.array();

    retval = W1 + W2 + W3;

    return retval;
}

// Actual test here
TEST(FiberChebyshevConstraint, brute_force_compute_A) {
    // Create a set of fiber base objects to store data
    int N = 16;
    FiberChebyshevConstraint FS(N, N - 3, N - 4, N - 4);
    // FSold is the 'old' state vector
    FiberChebyshevConstraint FSold(N, N - 3, N - 4, N - 4);
    double L = 0.1;

    // initialization conditions taken from julia to compare
    Eigen::VectorXd init_X{{0.9997588300226782, 0.9058773132192033, 0.6972363395327937, 0.05311960018683659,
                            0.9073058495439762, 0.5844709323969469, 0.9926879198264066, 0.8174088784626208,
                            0.6226889681098617, 0.944194248057808, 0.5264407345576302, 0.14594985883286538,
                            0.4044355011201404, 0.7273031813753761, 0.1779453022879729, 0.8886702751074465}};
    Eigen::VectorXd init_Y{{0.0717673027334802, 0.4141150124525852, 0.1293327638944125, 0.41547171378753767,
                            0.25002945685031575, 0.8789343034881281, 0.10127226406163892, 0.5856798770901475,
                            0.8913856789767505, 0.8582499568770857, 0.997423121916566, 0.8218839755299836,
                            0.04553314891254823, 0.4026486459151246, 0.8599775977324692, 0.7524155535683011}};
    Eigen::VectorXd init_T{{0.18311605785772567, 0.17679324432680055, 0.7696932851561678, 0.013768311103934616,
                            0.9854863423547627, 0.1300696339820414, 0.4064240831808379, 0.13709530013691218,
                            0.8522195831731575, 0.10551693315332411, 0.35052090551564186, 0.6938329801718334,
                            0.5987492088519557}};
    // concatenate vectors
    Eigen::VectorXd XXold(init_X.size() + init_Y.size() + init_T.size());
    XXold << init_X, init_Y, init_T;
    FSold.XX_ = XXold;

    // Create the old state to use (don't have to repeat this)
    FSold.DivideAndConstruct(L);

    // Check our interval values against Julia
    Eigen::VectorXd YCold_true{{0.04553314891254823, 0.020061900704291806, 0.0010749637703386008, 2.3508208090921707e-5,
                                2.261490314150389e-9, 1.9767436465991804e-9, -8.75935859549268e-10,
                                -5.922282468065743e-10, 3.1612152189686736e-10, 1.9438380117797486e-10,
                                -4.973190993918728e-11, -4.7307550371320973e-11}};
    Eigen::VectorXd XssssCold_true{{0.9997588300226782, 0.9058773132192033, 0.6972363395327937, 0.05311960018683659,
                                    0.9073058495439762, 0.5844709323969469, 0.9926879198264066, 0.8174088784626208,
                                    0.6226889681098617, 0.944194248057808, 0.5264407345576302, 0.14594985883286538}};
    Eigen::VectorXd TsCold_true{{0.18311605785772567, 0.17679324432680055, 0.7696932851561678, 0.013768311103934616,
                                 0.9854863423547627, 0.1300696339820414, 0.4064240831808379, 0.13709530013691218,
                                 0.8522195831731575, 0.10551693315332411, 0.35052090551564186, 0.6938329801718334}};
    EXPECT_TRUE(YCold_true.isApprox(FSold.YC_));
    EXPECT_TRUE(XssssCold_true.isApprox(FSold.XssssC_));
    EXPECT_TRUE(TsCold_true.isApprox(FSold.TsC_));

    // Construct a state vector to test against
    Eigen::VectorXd v = Eigen::VectorXd::Zero(XXold.size());
    v[0] = 1.0;
    FS.XX_ = v;
    FS.DivideAndConstruct(L);

    // Check against what we get from Julia
    Eigen::VectorXd YC_true{{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    Eigen::VectorXd XssssC_true{{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    Eigen::VectorXd TsC_true{{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    EXPECT_TRUE(YC_true.isApprox(FS.YC_));
    EXPECT_TRUE(XssssC_true.isApprox(FS.XssssC_));
    EXPECT_TRUE(TsC_true.isApprox(FS.TsC_));

    // Try to form up one column
    auto vret = lobj_generator(XXold, v, FSold, FS, L);
    Eigen::VectorXd vret_true{{0.00833785073071462, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    EXPECT_TRUE(vret_true.isApprox(vret));

    // Iterate through components of the old vector, brute forcing the calc
    auto lXX = XXold.size();
    Eigen::MatrixXd A = Eigen::MatrixXd::Zero(FS.n_equations_, lXX);
    for (auto i = 0; i < lXX; ++i) {
        Eigen::VectorXd v = Eigen::VectorXd::Zero(lXX);
        v[i] = 1.0;
        A.col(i) = lobj_generator(XXold, v, FSold, FS, L);
    }

    Eigen::MatrixXd A_real{
        {0.0083378507307146, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.1830718957622049, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0455221676840576, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000, 0.0035468085128739,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000208532538, 0.0000000000000000,  -0.0000000234599105,
         0.0000000000000000, 0.0000000026066567,  0.0000000000000000, -0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0080076494583034,
         0.0000000000000000, -0.0000150143427343, 0.0000000000000000, 0.0181736207080743,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0008273923958158, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  -0.0000001397547210, 0.0000000000000000, 0.0000000960813707, 0.0000000000000000,
         -0.0000000279509442, 0.0000000000000000,  0.0000000017469340, 0.0000000000000000, -0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0006708226608816,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0007495038043613,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000003236683225, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  -0.0000000000357113, 0.0000000000000000, 0.0000000000428535,
         0.0000000000000000,  -0.0000000000079358, 0.0000000000000000,  0.0000000000007936, 0.0000000000000000,
         -0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000228552244,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000012487466149,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000022286678,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000291060392,  0.0000000000000000,  -0.0000000232848313, 0.0000000000000000,
         0.0000000116424157, 0.0000000000000000,  -0.0000000033264045, 0.0000000000000000,  0.0000000004158006,
         0.0000000000000000, -0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000020518634,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000002571143, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000002474672, 0.0000000000000000,  -0.0000000004949344,
         0.0000000000000000, 0.0000000003535246, 0.0000000000000000, -0.0000000001237336, 0.0000000000000000,
         0.0000000000176762, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000011553492, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  -0.0000000003560014, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000004377737,  0.0000000000000000,
         -0.0000000010006257, 0.0000000000000000,  0.0000000008442779, 0.0000000000000000,  -0.0000000003335419,
         0.0000000000000000,  0.0000000000521159,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000008695309, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  -0.0000000000811917, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000521126,
         0.0000000000000000,  -0.0000000001302815, 0.0000000000000000,  0.0000000001215960, 0.0000000000000000,
         -0.0000000000521126, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000004840926,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000002694050, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000001233881, 0.0000000000000000,  -0.0000000003290351, 0.0000000000000000, 0.0000000003290351,
         0.0000000000000000, -0.0000000001233881, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000001968454, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000205108,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000128695, 0.0000000000000000, -0.0000000000360346, 0.0000000000000000,
         0.0000000000339755, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000001835361, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         -0.0000000000174321, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000143019,  0.0000000000000000, -0.0000000000343245,
         0.0000000000000000,  0.0000000000200226, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, -0.0000000000261809, 0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  -0.0000000000328235, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000049945,  0.0000000000000000,
         -0.0000000000089901, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000000069045, 0.0000000000000000}};
    EXPECT_TRUE(A_real.isApprox(A));

    // Check that A*XX == lobj(XX)
    Eigen::VectorXd Axx = A * XXold;
    Eigen::VectorXd XXformed = lobj_generator(XXold, XXold, FSold, FS, L);
    EXPECT_TRUE(Axx.isApprox(XXformed));
}

// Test if we can form A directly
TEST(FiberChebyshevConstraint, directly_compute_A) {
    // Create a set of fiber base objects to store data
    int N = 16;
    FiberChebyshevConstraint FS(N, N - 3, N - 4, N - 4);
    double L = 0.1;
    double rat = L / 2.0;

    // initialization conditions taken from julia to compare
    Eigen::VectorXd init_X{{0.9997588300226782, 0.9058773132192033, 0.6972363395327937, 0.05311960018683659,
                            0.9073058495439762, 0.5844709323969469, 0.9926879198264066, 0.8174088784626208,
                            0.6226889681098617, 0.944194248057808, 0.5264407345576302, 0.14594985883286538,
                            0.4044355011201404, 0.7273031813753761, 0.1779453022879729, 0.8886702751074465}};
    Eigen::VectorXd init_Y{{0.0717673027334802, 0.4141150124525852, 0.1293327638944125, 0.41547171378753767,
                            0.25002945685031575, 0.8789343034881281, 0.10127226406163892, 0.5856798770901475,
                            0.8913856789767505, 0.8582499568770857, 0.997423121916566, 0.8218839755299836,
                            0.04553314891254823, 0.4026486459151246, 0.8599775977324692, 0.7524155535683011}};
    Eigen::VectorXd init_T{{0.18311605785772567, 0.17679324432680055, 0.7696932851561678, 0.013768311103934616,
                            0.9854863423547627, 0.1300696339820414, 0.4064240831808379, 0.13709530013691218,
                            0.8522195831731575, 0.10551693315332411, 0.35052090551564186, 0.6938329801718334,
                            0.5987492088519557}};
    // concatenate vectors
    Eigen::VectorXd XX(init_X.size() + init_Y.size() + init_T.size());
    XX << init_X, init_Y, init_T;
    FS.XX_ = XX;

    // Create updated state vector
    FS.DivideAndConstruct(L);

    // Check the integration matrix direct construction
    FS.ConstructIntegrationMatricesX(FS.XssssM_, FS.XsssM_, FS.XssM_, FS.XsM_, FS.XM_, FS.IM_, rat);
    FS.ConstructIntegrationMatricesT(FS.TsM_, FS.TM_, FS.IMT_, rat);

    // Grab the diagonals of the different terms
    Eigen::VectorXd W1Mvec = FS.XssssC_.array() * FS.TsC_.array();
    Eigen::VectorXd W2Mvec = FS.YC_.array() * FS.TsC_.array();
    Eigen::VectorXd W3Mvec = FS.YC_.array() * FS.XssssC_.array();
    Eigen::MatrixXd W1M = W1Mvec.asDiagonal();
    Eigen::MatrixXd W2M = W2Mvec.asDiagonal();
    Eigen::MatrixXd W3M = W3Mvec.asDiagonal();

    // Extract the relevant parts of the matrix for the multiply
    Eigen::MatrixXd XExtractor = Eigen::MatrixXd::Zero(FS.n_nodes_, 2 * FS.n_nodes_ + FS.n_nodes_tension_);
    Eigen::MatrixXd YExtractor = Eigen::MatrixXd::Zero(FS.n_nodes_, 2 * FS.n_nodes_ + FS.n_nodes_tension_);
    Eigen::MatrixXd TExtractor = Eigen::MatrixXd::Zero(FS.n_nodes_tension_, 2 * FS.n_nodes_ + FS.n_nodes_tension_);
    // Equivalent of Julia's better slicing information
    // XExtractor[:,1:N] = I(N)
    XExtractor.block(0, 0, FS.n_nodes_, FS.n_nodes_) = Eigen::MatrixXd::Identity(FS.n_nodes_, FS.n_nodes_);
    YExtractor.block(0, FS.n_nodes_, FS.n_nodes_, FS.n_nodes_) = Eigen::MatrixXd::Identity(FS.n_nodes_, FS.n_nodes_);
    TExtractor.block(0, 2 * FS.n_nodes_, FS.n_nodes_tension_, FS.n_nodes_tension_) =
        Eigen::MatrixXd::Identity(FS.n_nodes_tension_, FS.n_nodes_tension_);

    // Now form up the MatrixVector product
    Eigen::MatrixXd WW1M = W1M * FS.XM_ * YExtractor;
    Eigen::MatrixXd WW2M = W2M * FS.XssssM_ * XExtractor;
    Eigen::MatrixXd WW3M = W3M * FS.TsM_ * TExtractor;

    Eigen::MatrixXd WA = WW1M + WW2M + WW3M;

    Eigen::MatrixXd A_real{
        {0.0083378507307146, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.1830718957622049, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0455221676840576, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000, 0.0035468085128739,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000208532538, 0.0000000000000000,  -0.0000000234599105,
         0.0000000000000000, 0.0000000026066567,  0.0000000000000000, -0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0080076494583034,
         0.0000000000000000, -0.0000150143427343, 0.0000000000000000, 0.0181736207080743,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0008273923958158, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  -0.0000001397547210, 0.0000000000000000, 0.0000000960813707, 0.0000000000000000,
         -0.0000000279509442, 0.0000000000000000,  0.0000000017469340, 0.0000000000000000, -0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0006708226608816,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0007495038043613,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000003236683225, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  -0.0000000000357113, 0.0000000000000000, 0.0000000000428535,
         0.0000000000000000,  -0.0000000000079358, 0.0000000000000000,  0.0000000000007936, 0.0000000000000000,
         -0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000228552244,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000012487466149,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000022286678,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000291060392,  0.0000000000000000,  -0.0000000232848313, 0.0000000000000000,
         0.0000000116424157, 0.0000000000000000,  -0.0000000033264045, 0.0000000000000000,  0.0000000004158006,
         0.0000000000000000, -0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000020518634,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000002571143, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000002474672, 0.0000000000000000,  -0.0000000004949344,
         0.0000000000000000, 0.0000000003535246, 0.0000000000000000, -0.0000000001237336, 0.0000000000000000,
         0.0000000000176762, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000011553492, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  -0.0000000003560014, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000004377737,  0.0000000000000000,
         -0.0000000010006257, 0.0000000000000000,  0.0000000008442779, 0.0000000000000000,  -0.0000000003335419,
         0.0000000000000000,  0.0000000000521159,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000008695309, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  -0.0000000000811917, 0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000521126,
         0.0000000000000000,  -0.0000000001302815, 0.0000000000000000,  0.0000000001215960, 0.0000000000000000,
         -0.0000000000521126, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000004840926,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000002694050, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000001233881, 0.0000000000000000,  -0.0000000003290351, 0.0000000000000000, 0.0000000003290351,
         0.0000000000000000, -0.0000000001233881, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000001968454, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000205108,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000128695, 0.0000000000000000, -0.0000000000360346, 0.0000000000000000,
         0.0000000000339755, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000, 0.0000000001835361, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         -0.0000000000174321, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000143019,  0.0000000000000000, -0.0000000000343245,
         0.0000000000000000,  0.0000000000200226, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
         0.0000000000000000,  0.0000000000000000, -0.0000000000261809, 0.0000000000000000, 0.0000000000000000},
        {0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  -0.0000000000328235, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000049945,  0.0000000000000000,
         -0.0000000000089901, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
         0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000000069045, 0.0000000000000000}};
    EXPECT_TRUE(A_real.isApprox(WA));
}
