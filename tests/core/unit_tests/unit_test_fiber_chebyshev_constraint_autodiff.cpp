
/// \file unit_test_fiber_base.cpp
/// \brief Unit tests for FiberChebyshevConstraint class

// C++ includes
#include <iostream>
#include <memory>
#include <string>
#include <vector>

// skelly includes
#include <fiber_chebyshev_constraint_autodiff.hpp>
#include <msgpack.hpp>

// test files
#include "./mpi_environment.hpp"

// Constants that we are going to use for testing inputs and truth values later
// XXX I hate making these globals, but cleans up the later code a lot...
// initialization conditions taken from julia to compare
Eigen::VectorXd init_X{{0.9997588300226782, 0.9058773132192033, 0.6972363395327937, 0.05311960018683659,
                        0.9073058495439762, 0.5844709323969469, 0.9926879198264066, 0.8174088784626208,
                        0.6226889681098617, 0.944194248057808, 0.5264407345576302, 0.14594985883286538,
                        0.4044355011201404, 0.7273031813753761, 0.1779453022879729, 0.8886702751074465}};
Eigen::VectorXd init_Y{{0.0717673027334802, 0.4141150124525852, 0.1293327638944125, 0.41547171378753767,
                        0.25002945685031575, 0.8789343034881281, 0.10127226406163892, 0.5856798770901475,
                        0.8913856789767505, 0.8582499568770857, 0.997423121916566, 0.8218839755299836,
                        0.04553314891254823, 0.4026486459151246, 0.8599775977324692, 0.7524155535683011}};
Eigen::VectorXd init_T{{0.18311605785772567, 0.17679324432680055, 0.7696932851561678, 0.013768311103934616,
                        0.9854863423547627, 0.1300696339820414, 0.4064240831808379, 0.13709530013691218,
                        0.8522195831731575, 0.10551693315332411, 0.35052090551564186, 0.6938329801718334,
                        0.5987492088519557}};

Eigen::MatrixXd A_real{
    {0.0083378507307146, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.1830718957622049, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0455221676840576, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
    {0.0000000000000000, 0.0035468085128739,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000208532538, 0.0000000000000000,  -0.0000000234599105,
     0.0000000000000000, 0.0000000026066567,  0.0000000000000000, -0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0080076494583034,
     0.0000000000000000, -0.0000150143427343, 0.0000000000000000, 0.0181736207080743,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
    {0.0000000000000000,  0.0000000000000000,  0.0008273923958158, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  -0.0000001397547210, 0.0000000000000000, 0.0000000960813707, 0.0000000000000000,
     -0.0000000279509442, 0.0000000000000000,  0.0000000017469340, 0.0000000000000000, -0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0006708226608816,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0007495038043613,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
    {0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000003236683225, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  -0.0000000000357113, 0.0000000000000000, 0.0000000000428535,
     0.0000000000000000,  -0.0000000000079358, 0.0000000000000000,  0.0000000000007936, 0.0000000000000000,
     -0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000228552244,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000012487466149,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
    {0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000022286678,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000291060392,  0.0000000000000000,  -0.0000000232848313, 0.0000000000000000,
     0.0000000116424157, 0.0000000000000000,  -0.0000000033264045, 0.0000000000000000,  0.0000000004158006,
     0.0000000000000000, -0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000020518634,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000},
    {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000002571143, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000002474672, 0.0000000000000000,  -0.0000000004949344,
     0.0000000000000000, 0.0000000003535246, 0.0000000000000000, -0.0000000001237336, 0.0000000000000000,
     0.0000000000176762, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000011553492, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
    {0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  -0.0000000003560014, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000004377737,  0.0000000000000000,
     -0.0000000010006257, 0.0000000000000000,  0.0000000008442779, 0.0000000000000000,  -0.0000000003335419,
     0.0000000000000000,  0.0000000000521159,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000008695309, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
    {0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  -0.0000000000811917, 0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000521126,
     0.0000000000000000,  -0.0000000001302815, 0.0000000000000000,  0.0000000001215960, 0.0000000000000000,
     -0.0000000000521126, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000004840926,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
    {0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000002694050, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000001233881, 0.0000000000000000,  -0.0000000003290351, 0.0000000000000000, 0.0000000003290351,
     0.0000000000000000, -0.0000000001233881, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000001968454, 0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000},
    {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000205108,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000128695, 0.0000000000000000, -0.0000000000360346, 0.0000000000000000,
     0.0000000000339755, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000, 0.0000000001835361, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000},
    {0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     -0.0000000000174321, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000, 0.0000000000143019,  0.0000000000000000, -0.0000000000343245,
     0.0000000000000000,  0.0000000000200226, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,
     0.0000000000000000,  0.0000000000000000, -0.0000000000261809, 0.0000000000000000, 0.0000000000000000},
    {0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  -0.0000000000328235, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000049945,  0.0000000000000000,
     -0.0000000000089901, 0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
     0.0000000000000000,  0.0000000000000000,  0.0000000000000000, -0.0000000000069045, 0.0000000000000000}};

// Test our new integrate_up functionality
TEST(FiberChebyshevConstraintAutodiff, real_integrate_up) {
    // Create a smaller fiber
    int N = 8;
    FiberChebyshevConstraintAutodiff<autodiff::VectorXreal> FS(N, N - 3, N - 4, N - 4);

    // Create a canned state vector
    Eigen::VectorXd initXX{
        {1, 2, 3, 4, 5, 6, 7, 8, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.01, 0.02, 0.03, 0.04, 0.05}};
    FS.XX_ = initXX;

    // Try to use IntegrateUp starting at the lowest level
    // Need to have somewhere to shove the return type
    autodiff::VectorXreal XC_first = Eigen::VectorXd::Zero(4);
    autodiff::VectorXreal XsC_first{{6.0, 7.0078125, 2.9921875, -0.0026041666666666665}};
    autodiff::VectorXreal AX{{5.0}};
    std::tie(XC_first) = FS.IntegrateUp1(XsC_first, 0.5, AX);

    autodiff::VectorXreal XC_first_real{{5.0, 2.251953125, 0.8759765625, 0.24934895833333331}};
    EXPECT_TRUE(XC_first_real.isApprox(XC_first));

    // Try the second level
    autodiff::VectorXreal XC_second = Eigen::VectorXd::Zero(4);
    autodiff::VectorXreal XsC_second = Eigen::VectorXd::Zero(4);
    autodiff::VectorXreal XssC_second{{14.0, 23.9375, -0.03125, 0.020833333333333332}};
    autodiff::VectorXreal BX{{5.0, 6.0}};
    std::tie(XsC_second, XC_second) = FS.IntegrateUp2(XssC_second, 0.5, BX);

    EXPECT_TRUE(XC_first_real.isApprox(XC_second));
}

// Test if the Chebyshev convenience functions work correctly
TEST(FiberChebyshevConstraintAutodiff, real_divide_and_construct) {
    int N = 8;
    FiberChebyshevConstraintAutodiff<autodiff::VectorXreal> FS(N, N - 3, N - 4, N - 4);

    // Create a canned state vector
    autodiff::VectorXreal initXX{
        {1, 2, 3, 4, 5, 6, 7, 8, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.01, 0.02, 0.03, 0.04, 0.05}};
    FS.XX_ = initXX;

    // Call divide and construct, even though some of the values are bogus, to see if they are constructed
    // internally correctly
    FS.DivideAndConstruct(0.5);
    EXPECT_TRUE(FS.XssssC_.isApprox(initXX.segment(0, 4)));
    EXPECT_TRUE(FS.YssssC_.isApprox(initXX.segment(8, 4)));
    EXPECT_TRUE(FS.TsC_.isApprox(initXX.segment(16, 4)));

    // Check the integrations in XC
    autodiff::VectorXreal XsssC_true{{48.0, -0.125, 0.125, 0.125}};
    autodiff::VectorXreal XssC_true{{14.0, 11.984375, -0.0078125, 0.005208333333333333}};
    autodiff::VectorXreal XsC_true{{6.0, 3.5009765625, 0.7490234375, -0.0003255208333333333}};
    autodiff::VectorXreal XC_true{{5.0, 1.4063720703125, 0.21881103515625, 0.031209309895833332}};

    EXPECT_TRUE(XsssC_true.isApprox(FS.XsssC_));
    EXPECT_TRUE(XssC_true.isApprox(FS.XssC_));
    EXPECT_TRUE(XsC_true.isApprox(FS.XsC_));
    EXPECT_TRUE(XC_true.isApprox(FS.XC_));

    // Check the integrations in T
    autodiff::VectorXreal TC_true{{0.05, -0.00125, 0.00125, 0.00125}};
    EXPECT_TRUE(TC_true.isApprox(FS.TC_));
}

// ********************************************************************************************************************
// Matrix tests
// See if we can form up the A matrix (for Ax = b) in different ways...
// ********************************************************************************************************************

// Fully non-linear objective function
template <typename VecT>
VecT real_obj(const VecT &XX, FiberChebyshevConstraintAutodiff<VecT> &FS, const double L) {
    // Create an empty state vector for the return value
    VecT retval = Eigen::VectorXd::Zero(FS.n_equations_);

    // Copy the information into the fiber solver. It will now take care of constructing all of the intermediate
    // things we need (integrations, etc)
    FS.XX_ = XX;
    FS.DivideAndConstruct(L);

    // Now construct the objective we are after
    retval = (FS.YC_.array() * FS.XssssC_.array() * FS.TsC_.array());
    return retval;
}

// Test the 'real' number version of the jacobian
TEST(FiberChebyshevConstraintAutodiff, real_jacobian) {
    // Create a set of fiber base objects to store data
    int N = 16;
    FiberChebyshevConstraintAutodiff<autodiff::VectorXreal> FS(N, N - 3, N - 4, N - 4);
    double L = 0.1;

    // concatenate vectors
    autodiff::VectorXreal XX(init_X.size() + init_Y.size() + init_T.size());
    XX << init_X, init_Y, init_T;

    // Create the evalulation vector
    autodiff::VectorXreal F;

    Eigen::MatrixXd J =
        autodiff::jacobian(real_obj<autodiff::VectorXreal>, autodiff::wrt(XX), autodiff::at(XX, FS, L), F);

    // Check if we are close to the 'real' A
    EXPECT_TRUE(A_real.isApprox(J));
}

// Test the 'dual' number version of the jacobian
TEST(FiberChebyshevConstraintAutodiff, dual_jacobian) {
    // Create a set of fiber base objects to store data
    int N = 16;
    FiberChebyshevConstraintAutodiff<autodiff::VectorXdual> FS(N, N - 3, N - 4, N - 4);
    double L = 0.1;

    // concatenate vectors
    autodiff::VectorXdual XX(init_X.size() + init_Y.size() + init_T.size());
    XX << init_X, init_Y, init_T;

    // Create the evalulation vector
    autodiff::VectorXdual F;

    Eigen::MatrixXd J =
        autodiff::jacobian(real_obj<autodiff::VectorXdual>, autodiff::wrt(XX), autodiff::at(XX, FS, L), F);

    // Check if we are close to the 'real' A
    EXPECT_TRUE(A_real.isApprox(J));
}
